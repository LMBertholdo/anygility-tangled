#!/usr/bin/env python
# coding: utf-8
###############################################################################
# make-playbook - Create a playbook based on vp-cli statistics and routing 
#               information using command line arguments
#
# Copyright (C) 2022 by University of Twente
# Written by Joao Ceron <ceron@botlog.org> and
#            Leandro Bertholdo <leandro.bertholdo@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
###############################################################################

import pandas as pd
import glob as glob
import re
import numpy as np
import argparse
import sys
import signal
import logging
import importlib
from IPython.display import display

###############################################################################
### Program settings
program_name = sys.argv[0][:-3]
version = 0.3

# convert sites to IATA
iata = {
		"au-syd-anycast01": "SYD",
		"br-gru-anycast01": "GRU",
		"br-poa-anycast02": "POA",
		"fr-par-anycast01": "CDG",
		"uk-lnd-anycast02": "LHR",
		"us-sea-anycast01": "SEA",
		"us-los-anycast01": "LAX",
		"us-mia-anycast01": "MIA",
		"us-was-anycast01": "IAD",
		"de-fra-anycast01": "FRA",
		"sg-sin-anycast01": "SIN",
		"dk-cop-anycast01": "COP",
		"za-jnb-anycast01": "JNB",
		"nl-ens-anycast02": "ENS",
		"nl-ams-anycast01": "AMS",
		"nl-arn-anycast01": "ARN", 
} 

#------------------------------------------------------------------------------
def get_bgp_policy(fstats):
    '''
    Extract BGP Routing policy from *.stas files 
    '''
    logging.info(f"Parsing [{fstats}]")
    f = open(fstats, 'r')
    Lines = f.readlines() 
    for line in Lines:
        if re.match("#policy", line):
            #print(f"Line {line}")
            policy=line.split(',')[1]
            return (policy.strip())
    return None

#------------------------------------------------------------------------------
def signal_handler(sig, frame):
    print('Ctrl+C detected.')
    cursor.show()
    sys.exit(0)

#------------------------------------------------------------------------------
def parser_args ():
    parser = argparse.ArgumentParser(prog=program_name, usage='%(prog)s [options]')
    parser.add_argument("--version", help="print version and exit", action="store_true")
    parser.add_argument("-v", help="print verbose messages", action="store_true",dest="verbose")
    parser.add_argument("-d","--debug", help="print debug messages", action="store_true")
    parser.add_argument('--routing', help="add routing information to playbook file", action='store_true')
    parser.add_argument('--dir', help="directory with vp-cli stats files", action='append')
    parser.add_argument('--out', nargs='?', help="File name to save Playbook results")
    return parser

#------------------------------------------------------------------------------
def read_vpcli_stats_folder (stats_dir, routing_option): 
    """ Read all vp-cli *.stats files in folder and return a dataframe
        receive: stats_dir: folder containing *.stats files generated by VP-CLI.py
                 routing_option: False just includes statistics files
                                 True adds statistics and routing information to playbook
        returns: df in format ['site', 'counts', 'percent', 'bgp']
    """ 
    print (f"Building Playbook from {stats_dir}")

    # Empty df
    df_all=pd.DataFrame(columns=['site'])
    
    flist=glob.glob(stats_dir+'/*.stats')
    if not flist:
        print(f'Folder {stats_dir}')

    # Read stats files from directory
    for fstats in flist:
        # Read stats df
        logging.info(f"Statistics [{fstats}]")
        df=pd.read_csv(fstats,comment='#')
    
        # Add BGP_Policy from stats comments
        df['bgp']=get_bgp_policy(fstats)
    
        #Buid Routing information dataframe
        routing_info=fstats.split('/')[-1].replace(".stats",".routing",1)
        logging.info(f"Routing Policy [{routing_info}]")
        df['routing_info']=routing_info    
        
        # Join stats to all
        df_all=df_all.append(df)
    
    # Map site to IATA code
    df_all['site']=df_all['site'].map(iata)
    
    # Convert to playbook format
    df = df_all.groupby(['site','bgp'])['percent'].sum().unstack().T.fillna(0)
    
    # Build Routing info df and join info to playbook
    df_routing=df_all[['bgp','routing_info']].drop_duplicates()
    df_routing=df_routing.set_index(['bgp'])
    df_res = pd.concat([df,df_routing], axis=1)
    df_res.index.name='bgp'

    if (routing_option):
        # return df_res if you want a playbook with routing information
        return df_res
    else:
        # return df if you want stats only
        return df

#------------------------------------------------------------------------------
def set_log_level(log_level=logging.INFO):
    """Sets the log level of the notebook. Per default this is 'INFO' but
    can be changed.
    :param level: level to be passed to logging (defaults to 'INFO')
    :type level: str
    """
    importlib.reload(logging)
    logging.basicConfig(
            level=log_level,
            format='%(asctime)s.%(msecs)03d %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
    )

#------------------------------------------------------------------------------
# check parameters
def evaluate_args():
    parser = parser_args()
    args, unknown = parser.parse_known_args()
    #args = parser.parse_args()

    if (unknown):
        print (f'Unknow argument {unknown}')
        parser.print_help()
        print ('')
        sys.exit(0)

    if (args.verbose):
        set_log_level('INFO')
        logging.debug(args)

    if (args.debug):
        set_log_level('DEBUG')
        logging.debug(args)

    if (args.version):
        print (version)
        sys.exit(0)

    if args.dir:
        return (args)

   
    parser.print_help()
    print ("\nyou should enter at least one folder to analyze (--dir)")
    sys.exit(0)


###############################################################################
### Main Process

if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    set_log_level('ERROR')
    args = evaluate_args()
 
    if (args.dir):
        df_all=pd.DataFrame()

        # check all folders pointed at command line arguments
        for stats_dir in args.dir:
            logging.info(f'Reading: [{stats_dir}]')
    
            # load all stats file on folder to df
            df=read_vpcli_stats_folder(stats_dir, args.routing)
            logging.info(f'=== df from {stats_dir}') 
            df_all=df_all.append(df)

        # Case you are mixing sites (policy using different sites)
        # just fill with zero sites not used on that policy
        df_all=df_all.fillna(0)
        logging.info(display(df_all))

        # Save results 
        if (args.out):
            df_all.to_csv(args.out)
            print(f'\nPlaybook file saved to [{args.out}]\n')


    





